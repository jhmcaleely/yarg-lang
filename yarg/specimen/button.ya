import("gpio");

var any[NUM_BANK0_GPIOS] response_leds;
var bool[NUM_BANK0_GPIOS] states;

var button = make_channel();

fun gpio_response(num, events) {
    if ((events == GPIO_IRQ_EDGE_FALL) or (events == GPIO_IRQ_EDGE_RISE)) {
        share(button, num);
    }
}

fun setup_button_led(led_io, button_io) {
    
    gpio_init(led_io);
    gpio_set_direction(led_io, GPIO_OUT);

    response_leds[button_io] = led_io;

    gpio_init(button_io);
}

const gpio_button1 = 0d2;
const gpio_led1 = 0d3;

const gpio_button2 = 0d4;
const gpio_led2 = 0d5;

setup_button_led(gpio_led1, gpio_button1);
setup_button_led(gpio_led2, gpio_button2);

gpio_set_irq_routine(gpio_response);

gpio_set_irq_enabled(gpio_button1, GPIO_IRQ_EDGE_FALL | GPIO_IRQ_EDGE_RISE, true);
gpio_set_irq_enabled(gpio_button2, GPIO_IRQ_EDGE_FALL | GPIO_IRQ_EDGE_RISE, true);
irq_set_enabled(IO_IRQ_BANK0, true);

while (true) {
    var pressed = receive(button);
    states[pressed] = !states[pressed];
    gpio_put(response_leds[pressed], states[pressed]);
}
