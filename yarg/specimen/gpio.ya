import("machine");

var pico_led = 0d25;

var GPIO_OUT = true;
var GPIO_IN = false;
var GPIO_FUNC_SIO = 0d5;

var RP2040 = true;

var PADS_BANK0_GPIO0_IE_BITS = 0x00000040;
var PADS_BANK0_GPIO0_OD_BITS = 0x00000080;
var PADS_BANK0_GPIO0_ISO_BITS = 0x00000100;

map struct {
    muint32 rw gpio_out@0x10;
    muint32 rw gpio_oe@0x20;
} rw sio_hw@0xd0000000;

var REG_ALIAS_RW_BITS  = 0x0 << 0d12;
var REG_ALIAS_XOR_BITS = 0x1 << 0d12;
var REG_ALIAS_SET_BITS = 0x2 << 0d12;
var REG_ALIAS_CLR_BITS = 0x3 << 0d12;

class alias_reg {
    init(addr) {
        this.base = addr;
    }
    read() { return rpeek(this.base); }
    write(val) { rpoke(this.base + REG_ALIAS_RW_BITS, val); }
    write_masked(val, mask) { this.xor((this.read() ^ val) & mask); }
    set(mask) { rpoke(this.base + REG_ALIAS_SET_BITS, mask); }
    clr(mask) { rpoke(this.base + REG_ALIAS_CLR_BITS, mask); }
    xor(mask) { rpoke(this.base + REG_ALIAS_XOR_BITS, mask); }
}

class alias_reg2 {
    init(addr) {
        this.base = addr;
    }
    read() { return rpeek(this.base); }
    write(val) { rpoke(this.base, val); }
    write_masked(val, mask) { this.xor((this.read() ^ val) & mask); }
    set(mask) { rpoke(this.base + 0x4, mask); }
    clr(mask) { rpoke(this.base + 0x8, mask); }
    xor(mask) { rpoke(this.base + 0x12, mask); }
}

fun gpio_set_direction(pin, dir) {
    var ctrl = alias_reg2(sio_hw.gpio_oe);

    if (dir) {
        ctrl.set(0x1 << pin);
    }
    else {
        ctrl.clr(0x1 << pin);
    }
}

fun gpio_put(pin, value) {
    var ctrl = alias_reg2(sio_hw.gpio_out);

    if (value) {
        ctrl.set(0x1 << pin);
    }
    else {
        ctrl.clr(0x1 << pin);
    }
}

fun gpio_init(pin) {
    gpio_set_direction(pin, GPIO_IN);
    gpio_put(pin, false);
    gpio_set_function(pin, GPIO_FUNC_SIO);
}

var PADS_BANK0_BASE = 0x4001c000;
var IO_BANK0_BASE   = 0x40014000;

fun gpio_set_function(pin, function) {

    var pads_bank_0_pin_offset = 0d4 + 0d4 * pin;
    var pinctrl = alias_reg(PADS_BANK0_BASE + pads_bank_0_pin_offset);

    // Set input enable on, output disable off
    pinctrl.write_masked(PADS_BANK0_GPIO0_IE_BITS, PADS_BANK0_GPIO0_IE_BITS | PADS_BANK0_GPIO0_OD_BITS);

    // Zero all fields apart from fsel; we want this IO to do what the peripheral tells it.
    // This doesn't affect e.g. pullup/pulldown, as these are in pad controls.
    var ctrl_offset = (0d8 * pin) + 0d4;
    var hw_ctrl = alias_reg(IO_BANK0_BASE + ctrl_offset);
    hw_ctrl.write(function);

    if (!RP2040) {
        // Remove pad isolation now that the correct peripheral is in control of the pad
        pinctrl.clr(PADS_BANK0_GPIO0_ISO_BITS);
    }
}

