import("machine");
import("irq");

const pico_led = 0d25;

const GPIO_OUT = true;
const GPIO_IN = false;
const GPIO_FUNC_SIO = 0d5;
const GPIO_IRQ_EDGE_FALL = 0x4;
const GPIO_IRQ_EDGE_RISE = 0x8;
const GPIO_IRQ_CALLBACK_ORDER_PRIORITY = 0d0;
const NUM_BANK0_GPIOS = 0d30;

const PADS_BANK0_GPIO_IE_BITS = 0x00000040;
const PADS_BANK0_GPIO_OD_BITS = 0x00000080;
const PADS_BANK0_GPIO_ISO_BITS = 0x00000100;

const REG_ALIAS_RW_BITS  = 0x0 << 0d12;
const REG_ALIAS_XOR_BITS = 0x1 << 0d12;
const REG_ALIAS_SET_BITS = 0x2 << 0d12;
const REG_ALIAS_CLR_BITS = 0x3 << 0d12;

const io_bank0_base = 0x40014000;

place struct {
    struct {
        muint32 status;
        muint32 ctrl;
        }[NUM_BANK0_GPIOS] gpio;
    muint32[4]@0x0f0 intr;
    struct {
        muint32[4] inte;
        muint32[4] intf;
        muint32[4] ints;
        }[2]@0x100 proc;
    struct {
        muint32[4] inte;
        muint32[4] intf;
        muint32[4] ints;
        } dormant_wake;
    } {
    io_bank0_base io_bank0;
    io_bank0_base + REG_ALIAS_XOR_BITS io_bank0_xor;
    io_bank0_base + REG_ALIAS_SET_BITS io_bank0_set;
    io_bank0_base + REG_ALIAS_CLR_BITS io_bank0_clr;
    }

const pads_bank0_base = 0x4001c000;

place struct {
    muint32 voltage_select;
    muint32[NUM_BANK0_GPIOS] gpio;
    muint32 swclk;
    muint32 swd;
    } {
        pads_bank0_base pads_bank0;
        pads_bank0_base + REG_ALIAS_XOR_BITS pads_bank0_xor;
        pads_bank0_base + REG_ALIAS_SET_BITS pads_bank0_set;
        pads_bank0_base + REG_ALIAS_CLR_BITS pads_bank0_clr;
    }

fun write_masked(rw, xor, val, mask) { 
    const muint32 reg = peek(rw);
    poke xor, (reg ^ val) & mask;
}

fun gpio_set_direction(gpio, dir) {

    if (dir) {
        poke sio_hw.gpio_oe.set, 0x1 << gpio;
    }
    else {
        poke sio_hw.gpio_oe.clr, 0x1 << gpio;
    }
}

fun gpio_put(gpio, value) {

    if (value) {
        poke sio_hw.gpio_out.set, 0x1 << gpio;
    }
    else {
        poke sio_hw.gpio_out.clr, 0x1 << gpio;
    }
}

fun gpio_init(gpio) {
    gpio_set_direction(gpio, GPIO_IN);
    gpio_put(gpio, false);
    gpio_set_function(gpio, GPIO_FUNC_SIO);
}

fun gpio_set_function(gpio, function) {

    // Set input enable on, output disable off
    write_masked(pads_bank0.gpio[gpio], pads_bank0_xor.gpio[gpio], 
                 PADS_BANK0_GPIO_IE_BITS, PADS_BANK0_GPIO_IE_BITS | PADS_BANK0_GPIO_OD_BITS);


    // Zero all fields apart from fsel; we want this IO to do what the peripheral tells it.
    // This doesn't affect e.g. pullup/pulldown, as these are in pad controls.
    poke io_bank0.gpio[gpio].ctrl, function;
}

fun gpio_acknowledge_irq(gpio, events) {

    poke io_bank0.intr[(gpio / 0d8)], events << (0d4 * (gpio % 0d8));
}


fun make_core_gpio_irq_handler(callback) {

    const core = coreNum();

    fun gpio_irq_handler() {
        for (var gpio = 0d0; gpio < NUM_BANK0_GPIOS; gpio= gpio + 0d8) {
            var events8 = peek(io_bank0.proc[core].ints[gpio >> 0d3]);
        
            for(var i = gpio; (events8 != 0d0) and (i < (gpio + 0d8)); i = i + 0d1) {
                var events = events8 & 0xf;
                if (events != 0d0) {
                    gpio_acknowledge_irq(i, events);
                    callback(i, events);
                }
                events8 = events8 >> 0d4;
            }
        }
    }

    return gpio_irq_handler;
}

var struct {
    irq_routine;
    pinned_routine;
    }[2] gpio_handlers;

fun gpio_set_irq_routine(callback) {
    const core = coreNum();

    fun setup_callback() {
        if (callback) {
            gpio_handlers[core].irq_routine = make_routine(make_core_gpio_irq_handler(callback), true);
            gpio_handlers[core].pinned_routine = pin(gpio_handlers[core].irq_routine);
            irq_add_shared_handler(IO_IRQ_BANK0, gpio_handlers[core].pinned_routine, GPIO_IRQ_CALLBACK_ORDER_PRIORITY);
        }
    }

    if (!gpio_handlers[core].pinned_routine) {
        setup_callback();
    } else {
        irq_remove_handler(IO_IRQ_BANK0, gpio_handlers[core].pinned_routine);
        gpio_handlers[core].pinned_routine = nil;
        gpio_handlers[core].irq_routine = nil;
        setup_callback();
    }
}

fun gpio_set_irq_enabled(gpio, events, enabled) {
    gpio_acknowledge_irq(gpio, events);

    events = events << (0d4 * (gpio % 0d8));

    if (enabled) {
        poke io_bank0_set.proc[coreNum()].inte[gpio >> 0d3], events;
    }
    else {
        poke io_bank0_clr.proc[coreNum()].inte[gpio >> 0d3], events;
    }

    if (enabled) {
        irq_set_enabled(IO_IRQ_BANK0, true);
    }
}

