// Yarg implementation of Conway's Life
// https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life
//
// A 2D matrix of cells, which contain a running instance
// of Conway's Life.
//
// The neighbourhood (n) around a cell (c) is consulted to
// see if the cell should maintain or change state
//
// nnn
// ncn
// nnn

// characters handing for ascii state reports
const live = 1;
const dead = 0;

var seed = 0d4;

fun rand() {

    // https://github.com/kraj/uClibc/blob/master/libc/stdlib/rand_r.c#L25

    var next = seed;
    var result;

    next = next * 0d1103515245;
    next = next + 0d12345;
    result = (next / 0d65536) % 0d2048;

    next = next * 0d1103515245;
    next = next + 0d12345;
    result = result << 0d10;
    result = result ^ ((next / 0d65536) % 0d1024);

    next = next * 0d1103515245;
    next = next + 0d12345;
    result = result << 0d10;
    result = result ^ ((next / 0d65536) % 0d1024);

    seed = next;
    return next;
}

fun random_state() {

    if (rand() > 0d4294967295 / 0d2) {
        return 0;
    }
    else {
        return 1;
    }
}

fun make_world(size) {

    var world = make_array(size);
    for (var c = 0d0; c < len(world); c = c + 0d1) {
        world[c] = random_state();
    }
    return world;
}

fun neighbour_weight(world, cell, neighbour_of) {
    var result = 0;
    for (var i = 0; i < 8; i = i + 1) {
        var world_offset = neighbour_of(cell, i);
        result = result + world[world_offset];
    }
    return result;
}

fun next_state(state, alive_neighbours) {
    var new_state = dead;
    
    if (state == live and (alive_neighbours == 2 or alive_neighbours == 3)) {
        new_state = live;
    }
    else if (state == dead and alive_neighbours == 3) {
        new_state = live;
    }

    return new_state;
}

fun next_generation(world, neighbour_of) {
    var next_gen = make_array(len(world));
    for (var cell = 0d0; cell < len(world); cell = cell + 0d1) {
        const nw = neighbour_weight(world, cell, neighbour_of);
        next_gen[cell] = next_state(world[cell], nw);
    }

    return next_gen;
}
